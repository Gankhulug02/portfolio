{"ast":null,"code":"var _jsxFileName = \"/Users/gankhulug/Desktop/portfolio-gankhulug/src/components/header/index.jsx\";\nimport React from \"react\";\nimport style from \"../header/style.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Header = () => {\n  var _s = $RefreshSig$();\n  const canvas = window.canvas;\n  const gl = canvas.getContext(\"webgl2\");\n  const dpr = window.devicePixelRatio;\n  const vertexSource = `#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nin vec2 position;\n\nvoid main(void) {\n    gl_Position = vec4(position, 0., 1.);\n}\n`;\n  const fragmentSource = `#version 300 es\n/*********\n* made by Matthias Hurrle (@atzedent)\n*/\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nout vec4 fragColor;\n\nuniform vec2 resolution;\nuniform float time;\n\n#define S smoothstep\n#define T .112358+time\n\nfloat rnd(vec2 p) {\n\treturn fract(\n\t\tsin(\n\t\t\tdot(\n\t\t\t\tp,\n        vec2(12.9898, 78.233)\n      )\n    )*43758.5453123\n  );\n}\n\nfloat noise(vec2 p) {\n\tvec2 f=fract(p), i=floor(p);\n\tfloat\n\ta=rnd(i),\n\tb=rnd(i+vec2(1,0)),\n\tc=rnd(i+vec2(0,1)),\n\td=rnd(i+vec2(1,1));\n\n\tvec2 u = f*f*(3.-2.*f);\n\n\treturn mix(a,b,u.x)+\n\t\t(c-a)*u.y*(1.-u.x)+\n\t\t(d-b)*u.y*u.x;\n}\n\nvoid main(void) {\n\tvec2 uv = (\n\t\tgl_FragCoord.xy -.5 * resolution.xy\n\t)/min(resolution.x, resolution.y);\n\n\tfloat t = T*.1;\n\tvec3 col = vec3(0);\n\tvec2 p = vec2(0);\n\tp.x = noise(uv+vec2(0,1));\n\tp.y = noise(uv+vec2(1,0));\n\n\tp = 8.*(\n\t\tvec2(\n\t\t\tsin(t),\n\t\t\t-cos(t)\n\t\t)*.15-p\n\t);\n\n\tfloat s = .35;\n\t\n\tfor(float i=.0;i<6.;i++) {\n\t\tp.x += s*sin(2.*t-i*1.5*p.y)+t;\n\t\tp.y += s*cos(2.*t+i*1.5*p.x)-t;\n\t}\n\n\tcol+= sin(t+p.x+p.y);\n\tcol = pow(S(vec3(0),vec3(1),col), vec3(.4));\n\tcol = mix(vec3(.7,.6,.4)*col, col, col);\n\n\tfloat\n\tstp = 2.,\n\tprog = T*.2,\n\tanim = floor(mod(prog-.5,stp));\n\t\n\tif(anim == .0) {\n\t\tprog -= length(uv)*.2;\n\t} else {\n\t\tprog -= min(abs(uv.x),abs(uv.y))*.2;\n\t}\n\tfloat scene = floor(mod(prog,stp));\n\tif(scene == .0) {\n\t\tcol = 1.-col;\n\t} \n\n\tfragColor = vec4(col,1);\n}\n`;\n  let time;\n  let buffer;\n  let program;\n  let resolution;\n  let vertices = [];\n  function resize() {\n    const {\n      innerWidth: width,\n      innerHeight: height\n    } = window;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    gl.viewport(0, 0, width * dpr, height * dpr);\n  }\n  function compile(shader, source) {\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error(gl.getShaderInfoLog(shader));\n    }\n  }\n  function setup() {\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    program = gl.createProgram();\n    compile(vs, vertexSource);\n    compile(fs, fragmentSource);\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error(gl.getProgramInfoLog(program));\n    }\n    vertices = [-1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0];\n    buffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n    const position = gl.getAttribLocation(program, \"position\");\n    gl.enableVertexAttribArray(position);\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);\n    time = gl.getUniformLocation(program, \"time\");\n    resolution = gl.getUniformLocation(program, \"resolution\");\n  }\n  function draw(now) {\n    _s();\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.useProgram(program);\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.uniform1f(time, now * 0.001);\n    gl.uniform2f(resolution, canvas.width, canvas.height);\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length * 0.5);\n  }\n  _s(draw, \"ZdQBZ3rq7bWAAMQq6hlVCmYF0jM=\", false, function () {\n    return [gl.useProgram];\n  });\n  function loop(now) {\n    draw(now);\n    requestAnimationFrame(loop);\n  }\n  function init() {\n    setup();\n    resize();\n    loop(0);\n  }\n  document.body.onload = init;\n  window.onresize = resize;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.header,\n    children: \"canvas#canvas\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 198,\n    columnNumber: 10\n  }, this);\n};\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["React","style","Header","canvas","window","gl","getContext","dpr","devicePixelRatio","vertexSource","fragmentSource","time","buffer","program","resolution","vertices","resize","innerWidth","width","innerHeight","height","viewport","compile","shader","source","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","error","getShaderInfoLog","setup","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","position","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","getUniformLocation","draw","now","clearColor","clear","COLOR_BUFFER_BIT","useProgram","uniform1f","uniform2f","drawArrays","TRIANGLES","length","loop","requestAnimationFrame","init","document","body","onload","onresize","header"],"sources":["/Users/gankhulug/Desktop/portfolio-gankhulug/src/components/header/index.jsx"],"sourcesContent":["import React from \"react\";\nimport style from \"../header/style.module.css\";\nconst Header = () => {\n  const canvas = window.canvas;\n  const gl = canvas.getContext(\"webgl2\");\n  const dpr = window.devicePixelRatio;\n\n  const vertexSource = `#version 300 es\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nin vec2 position;\n\nvoid main(void) {\n    gl_Position = vec4(position, 0., 1.);\n}\n`;\n  const fragmentSource = `#version 300 es\n/*********\n* made by Matthias Hurrle (@atzedent)\n*/\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nout vec4 fragColor;\n\nuniform vec2 resolution;\nuniform float time;\n\n#define S smoothstep\n#define T .112358+time\n\nfloat rnd(vec2 p) {\n\treturn fract(\n\t\tsin(\n\t\t\tdot(\n\t\t\t\tp,\n        vec2(12.9898, 78.233)\n      )\n    )*43758.5453123\n  );\n}\n\nfloat noise(vec2 p) {\n\tvec2 f=fract(p), i=floor(p);\n\tfloat\n\ta=rnd(i),\n\tb=rnd(i+vec2(1,0)),\n\tc=rnd(i+vec2(0,1)),\n\td=rnd(i+vec2(1,1));\n\n\tvec2 u = f*f*(3.-2.*f);\n\n\treturn mix(a,b,u.x)+\n\t\t(c-a)*u.y*(1.-u.x)+\n\t\t(d-b)*u.y*u.x;\n}\n\nvoid main(void) {\n\tvec2 uv = (\n\t\tgl_FragCoord.xy -.5 * resolution.xy\n\t)/min(resolution.x, resolution.y);\n\n\tfloat t = T*.1;\n\tvec3 col = vec3(0);\n\tvec2 p = vec2(0);\n\tp.x = noise(uv+vec2(0,1));\n\tp.y = noise(uv+vec2(1,0));\n\n\tp = 8.*(\n\t\tvec2(\n\t\t\tsin(t),\n\t\t\t-cos(t)\n\t\t)*.15-p\n\t);\n\n\tfloat s = .35;\n\t\n\tfor(float i=.0;i<6.;i++) {\n\t\tp.x += s*sin(2.*t-i*1.5*p.y)+t;\n\t\tp.y += s*cos(2.*t+i*1.5*p.x)-t;\n\t}\n\n\tcol+= sin(t+p.x+p.y);\n\tcol = pow(S(vec3(0),vec3(1),col), vec3(.4));\n\tcol = mix(vec3(.7,.6,.4)*col, col, col);\n\n\tfloat\n\tstp = 2.,\n\tprog = T*.2,\n\tanim = floor(mod(prog-.5,stp));\n\t\n\tif(anim == .0) {\n\t\tprog -= length(uv)*.2;\n\t} else {\n\t\tprog -= min(abs(uv.x),abs(uv.y))*.2;\n\t}\n\tfloat scene = floor(mod(prog,stp));\n\tif(scene == .0) {\n\t\tcol = 1.-col;\n\t} \n\n\tfragColor = vec4(col,1);\n}\n`;\n  let time;\n  let buffer;\n  let program;\n  let resolution;\n  let vertices = [];\n\n  function resize() {\n    const { innerWidth: width, innerHeight: height } = window;\n\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n\n    gl.viewport(0, 0, width * dpr, height * dpr);\n  }\n\n  function compile(shader, source) {\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      console.error(gl.getShaderInfoLog(shader));\n    }\n  }\n\n  function setup() {\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n\n    program = gl.createProgram();\n\n    compile(vs, vertexSource);\n    compile(fs, fragmentSource);\n\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.error(gl.getProgramInfoLog(program));\n    }\n\n    vertices = [\n      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,\n    ];\n\n    buffer = gl.createBuffer();\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n    const position = gl.getAttribLocation(program, \"position\");\n\n    gl.enableVertexAttribArray(position);\n    gl.vertexAttribPointer(position, 2, gl.FLOAT, false, 0, 0);\n\n    time = gl.getUniformLocation(program, \"time\");\n    resolution = gl.getUniformLocation(program, \"resolution\");\n  }\n\n  function draw(now) {\n    gl.clearColor(0, 0, 0, 1);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.useProgram(program);\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n\n    gl.uniform1f(time, now * 0.001);\n    gl.uniform2f(resolution, canvas.width, canvas.height);\n    gl.drawArrays(gl.TRIANGLES, 0, vertices.length * 0.5);\n  }\n\n  function loop(now) {\n    draw(now);\n    requestAnimationFrame(loop);\n  }\n\n  function init() {\n    setup();\n    resize();\n    loop(0);\n  }\n\n  document.body.onload = init;\n  window.onresize = resize;\n\n  return <div className={style.header}>canvas#canvas</div>;\n};\n\nexport default Header;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,4BAA4B;AAAC;AAC/C,MAAMC,MAAM,GAAG,MAAM;EAAA;EACnB,MAAMC,MAAM,GAAGC,MAAM,CAACD,MAAM;EAC5B,MAAME,EAAE,GAAGF,MAAM,CAACG,UAAU,CAAC,QAAQ,CAAC;EACtC,MAAMC,GAAG,GAAGH,MAAM,CAACI,gBAAgB;EAEnC,MAAMC,YAAY,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EACC,MAAMC,cAAc,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;EACC,IAAIC,IAAI;EACR,IAAIC,MAAM;EACV,IAAIC,OAAO;EACX,IAAIC,UAAU;EACd,IAAIC,QAAQ,GAAG,EAAE;EAEjB,SAASC,MAAM,GAAG;IAChB,MAAM;MAAEC,UAAU,EAAEC,KAAK;MAAEC,WAAW,EAAEC;IAAO,CAAC,GAAGhB,MAAM;IAEzDD,MAAM,CAACe,KAAK,GAAGA,KAAK,GAAGX,GAAG;IAC1BJ,MAAM,CAACiB,MAAM,GAAGA,MAAM,GAAGb,GAAG;IAE5BF,EAAE,CAACgB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEH,KAAK,GAAGX,GAAG,EAAEa,MAAM,GAAGb,GAAG,CAAC;EAC9C;EAEA,SAASe,OAAO,CAACC,MAAM,EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}